-- ===========================
-- ELIMINAR LAS TABLAS SI EXISTEN (DROP)
-- ===========================
DROP TABLE IF EXISTS PAGO;
DROP TABLE IF EXISTS BOLETO;
DROP TABLE IF EXISTS HORARIO_PELICULA;
DROP TABLE IF EXISTS ASIENTO;
DROP TABLE IF EXISTS VERSION;
DROP TABLE IF EXISTS USUARIO;
DROP TABLE IF EXISTS PELICULA_GENERO;
DROP TABLE IF EXISTS PELICULA_DIRECTOR;
DROP TABLE IF EXISTS PELICULA_ACTOR;
DROP TABLE IF EXISTS PELICULA;
DROP TABLE IF EXISTS SALA_TIPO;
DROP TABLE IF EXISTS TIPOS_SALA;
DROP TABLE IF EXISTS SALA;
DROP TABLE IF EXISTS CINE;
DROP TABLE IF EXISTS DIRECTOR;
DROP TABLE IF EXISTS ACTOR;
DROP TABLE IF EXISTS GENERO;
DROP TABLE IF EXISTS COMPANIA;

-- ===========================
-- CREACIÓN DE TABLAS
-- ===========================

-- Tabla de Cines
CREATE TABLE CINE (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE NVARCHAR(255) NOT NULL,
    UBICACION NVARCHAR(255) NOT NULL
);

-- Tabla de Salas
CREATE TABLE SALA (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE NVARCHAR(100) NOT NULL,
    CINE_ID INT NOT NULL,
    CONSTRAINT FK_SALA_CINE FOREIGN KEY (CINE_ID) 
    REFERENCES CINE(ID) ON DELETE CASCADE
);

-- Tabla de Tipos de Sala
CREATE TABLE TIPOS_SALA (
    ID_TIPO_SALA INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE NVARCHAR(50) NOT NULL UNIQUE
);

-- Tabla intermedia para la relación muchos a muchos entre SALA y TIPOS_SALA
CREATE TABLE SALA_TIPO (
    SALA_ID INT NOT NULL,
    ID_TIPO_SALA INT NOT NULL,
    PRIMARY KEY (SALA_ID, ID_TIPO_SALA),
    CONSTRAINT FK_SALA_TIPO_SALA FOREIGN KEY (SALA_ID) 
    REFERENCES SALA(ID) ON DELETE CASCADE,
    CONSTRAINT FK_SALA_TIPO_TIPO FOREIGN KEY (ID_TIPO_SALA) 
    REFERENCES TIPOS_SALA(ID_TIPO_SALA) ON DELETE CASCADE
);

-- Tabla de Asientos
CREATE TABLE ASIENTO (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    SALA_ID INT NOT NULL,
    NUMERO_ASIENTO NVARCHAR(10) NOT NULL,
    NUMERO_FILA NVARCHAR(5) NOT NULL,
    DISPONIBLE BIT DEFAULT 1,
    CONSTRAINT FK_ASIENTO_SALA FOREIGN KEY (SALA_ID) 
    REFERENCES SALA(ID) ON DELETE CASCADE
);

-- Tabla de Actores
CREATE TABLE ACTOR (
    ID_ACTOR INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE NVARCHAR(255) NOT NULL,
    IMG NVARCHAR(255),
    IMG_BACKGROUND NVARCHAR(255),
    FECHA_NACIMIENTO DATE
);

-- Tabla de Directores
CREATE TABLE DIRECTOR (
    ID_DIRECTOR INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE NVARCHAR(255) NOT NULL,
    IMG NVARCHAR(255),
    IMG_BACKGROUND NVARCHAR(255),
    FECHA_NACIMIENTO DATE
);

-- Tabla de Géneros
CREATE TABLE GENERO (
    ID_GENERO INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE NVARCHAR(255) NOT NULL
);

-- Tabla de Compañías
CREATE TABLE COMPANIA (
    ID_COMPANIA INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE NVARCHAR(255) NOT NULL,
    DIRECCION NVARCHAR(500)
);

-- Tabla de Películas
CREATE TABLE PELICULA (
    ID_PELICULA INT IDENTITY(1,1) PRIMARY KEY,
    TITULO NVARCHAR(255) NOT NULL,
    ANO_LANZAMIENTO INT,
    LONGITUD_MINUTOS INT,
    SINOPSIS NVARCHAR(MAX),
    ID_COMPANIA INT NULL,
    CONSTRAINT FK_PELICULA_COMPANIA FOREIGN KEY (ID_COMPANIA) 
    REFERENCES COMPANIA(ID_COMPANIA) ON DELETE SET NULL
);

-- Tabla intermedia Películas - Actores
CREATE TABLE PELICULA_ACTOR (
    ID_PELICULA INT NOT NULL,
    ID_ACTOR INT NOT NULL,
    PRIMARY KEY (ID_PELICULA, ID_ACTOR),
    CONSTRAINT FK_PELICULA_ACTOR_PELICULA FOREIGN KEY (ID_PELICULA) 
    REFERENCES PELICULA(ID_PELICULA) ON DELETE CASCADE,
    CONSTRAINT FK_PELICULA_ACTOR_ACTOR FOREIGN KEY (ID_ACTOR) 
    REFERENCES ACTOR(ID_ACTOR) ON DELETE CASCADE
);

-- Tabla intermedia Películas - Directores
CREATE TABLE PELICULA_DIRECTOR (
    ID_PELICULA INT NOT NULL,
    ID_DIRECTOR INT NOT NULL,
    PRIMARY KEY (ID_PELICULA, ID_DIRECTOR),
    CONSTRAINT FK_PELICULA_DIRECTOR_PELICULA FOREIGN KEY (ID_PELICULA) 
    REFERENCES PELICULA(ID_PELICULA) ON DELETE CASCADE,
    CONSTRAINT FK_PELICULA_DIRECTOR_DIRECTOR FOREIGN KEY (ID_DIRECTOR) 
    REFERENCES DIRECTOR(ID_DIRECTOR) ON DELETE CASCADE
);

-- Tabla intermedia Películas - Géneros
CREATE TABLE PELICULA_GENERO (
    ID_PELICULA INT NOT NULL,
    ID_GENERO INT NOT NULL,
    PRIMARY KEY (ID_PELICULA, ID_GENERO),
    CONSTRAINT FK_PELICULA_GENERO_PELICULA FOREIGN KEY (ID_PELICULA) 
    REFERENCES PELICULA(ID_PELICULA) ON DELETE CASCADE,
    CONSTRAINT FK_PELICULA_GENERO_GENERO FOREIGN KEY (ID_GENERO) 
    REFERENCES GENERO(ID_GENERO) ON DELETE CASCADE
);

-- Tabla de Usuarios
CREATE TABLE USUARIO (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE NVARCHAR(100) NOT NULL,
    CORREO_ELECTRONICO NVARCHAR(100) UNIQUE NOT NULL,
    CONTRASENIA_HASH NVARCHAR(255) NOT NULL,
    FECHA_CREACION DATETIME DEFAULT GETDATE()
);

-- Tabla de Versiones
CREATE TABLE VERSION (
    ID_VERSION INT IDENTITY(1,1) PRIMARY KEY,
    IDIOMA NVARCHAR(50) NOT NULL,
    TIPO_VERSION NVARCHAR(50) NOT NULL
);

-- Tabla de Horarios de Películas
CREATE TABLE HORARIO_PELICULA (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    PELICULA_ID INT NOT NULL,
    SALA_ID INT NOT NULL,
    ID_VERSION INT NOT NULL,
    HORA_FUNCION DATETIME NOT NULL,
    ASIENTOS_DISPONIBLES INT NOT NULL,
    CONSTRAINT FK_HORARIO_PELICULA_PELICULA FOREIGN KEY (PELICULA_ID) 
    REFERENCES PELICULA(ID_PELICULA) ON DELETE CASCADE,
    CONSTRAINT FK_HORARIO_PELICULA_SALA FOREIGN KEY (SALA_ID) 
    REFERENCES SALA(ID) ON DELETE CASCADE,
    CONSTRAINT FK_HORARIO_PELICULA_VERSION FOREIGN KEY (ID_VERSION) 
    REFERENCES VERSION(ID_VERSION) ON DELETE CASCADE
);

-- Tabla de Boletos (SOLUCIÓN: ON DELETE NO ACTION)
CREATE TABLE BOLETO (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    USUARIO_ID INT NOT NULL,
    HORARIO_ID INT NOT NULL,
    ASIENTO_ID INT NOT NULL,
    FECHA_COMPRA DATETIME DEFAULT GETDATE(),
    ESTADO NVARCHAR(20) DEFAULT 'reservado',
    CONSTRAINT FK_BOLETO_ASIENTO FOREIGN KEY (ASIENTO_ID) 
    REFERENCES ASIENTO(ID) ON DELETE NO ACTION
);

-- Tabla de Pagos
CREATE TABLE PAGO (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    BOLETO_ID INT NOT NULL,
    MONTO DECIMAL(10,2) NOT NULL,
    CONSTRAINT FK_PAGO_BOLETO FOREIGN KEY (BOLETO_ID) 
    REFERENCES BOLETO(ID) ON DELETE CASCADE
);


-- ====================================
-- Insertar Tipos de Sala
-- ====================================
IF NOT EXISTS (SELECT 1 FROM TIPOS_SALA WHERE NOMBRE = 'Standard')
    INSERT INTO TIPOS_SALA (NOMBRE) VALUES ('Standard');

IF NOT EXISTS (SELECT 1 FROM TIPOS_SALA WHERE NOMBRE = '3D')
    INSERT INTO TIPOS_SALA (NOMBRE) VALUES ('3D');

IF NOT EXISTS (SELECT 1 FROM TIPOS_SALA WHERE NOMBRE = 'IMAX')
    INSERT INTO TIPOS_SALA (NOMBRE) VALUES ('IMAX');

-- ====================================
-- Insertar Cines
-- ====================================
INSERT INTO CINE (NOMBRE, UBICACION) VALUES
    ('Cineplex Centro', 'Avenida Principal #123'),
    ('Cinemark Norte', 'Calle 45 #678');

-- Obtener los IDs de los cines insertados
DECLARE @CINE1 INT = (SELECT ID FROM CINE WHERE NOMBRE = 'Cineplex Centro');
DECLARE @CINE2 INT = (SELECT ID FROM CINE WHERE NOMBRE = 'Cinemark Norte');

-- ====================================
-- Insertar Salas para cada Cine
-- ====================================
INSERT INTO SALA (NOMBRE, CINE_ID) VALUES 
    ('Sala 1', @CINE1), ('Sala 2', @CINE1), ('Sala 3', @CINE1), 
    ('Sala 4', @CINE1), ('Sala 5', @CINE1), ('Sala 6', @CINE1),
    ('Sala 1', @CINE2), ('Sala 2', @CINE2), ('Sala 3', @CINE2), 
    ('Sala 4', @CINE2), ('Sala 5', @CINE2), ('Sala 6', @CINE2);

-- Obtener IDs de Tipos de Sala
DECLARE @ID_STANDARD INT = (SELECT ID_TIPO_SALA FROM TIPOS_SALA WHERE NOMBRE = 'Standard');
DECLARE @ID_3D INT = (SELECT ID_TIPO_SALA FROM TIPOS_SALA WHERE NOMBRE = '3D');
DECLARE @ID_IMAX INT = (SELECT ID_TIPO_SALA FROM TIPOS_SALA WHERE NOMBRE = 'IMAX');

-- Asignar los tipos a cada sala
INSERT INTO SALA_TIPO (SALA_ID, ID_TIPO_SALA)
SELECT ID, 
    CASE 
        WHEN NOMBRE IN ('Sala 1', 'Sala 3', 'Sala 6') THEN @ID_STANDARD
        WHEN NOMBRE = 'Sala 2' THEN @ID_3D
        WHEN NOMBRE = 'Sala 4' THEN @ID_3D
        WHEN NOMBRE = 'Sala 5' THEN @ID_IMAX
    END
FROM SALA;

-- ====================================
-- Insertar Asientos (70 por sala)
-- ====================================
DECLARE @SALA_ID INT;
DECLARE @FILA CHAR(1);
DECLARE @NUMERO INT;

DECLARE CURSOR_SALAS CURSOR FOR 
SELECT ID FROM SALA;

OPEN CURSOR_SALAS;
FETCH NEXT FROM CURSOR_SALAS INTO @SALA_ID;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Insertar 70 asientos por sala (10 filas, 12 asientos por fila)
    DECLARE @FILA_INDEX INT = 1;
    WHILE @FILA_INDEX <= 10
    BEGIN
        SET @FILA = CHAR(64 + @FILA_INDEX); -- Convierte 1 -> 'A', 2 -> 'B', ..., 10 -> 'J'
        SET @NUMERO = 1;
        
        WHILE @NUMERO <= 12
        BEGIN
            INSERT INTO ASIENTO (SALA_ID, NUMERO_ASIENTO, NUMERO_FILA, DISPONIBLE) 
            VALUES (@SALA_ID, CAST(@NUMERO AS NVARCHAR), @FILA, 1);
            SET @NUMERO = @NUMERO + 1;
        END
        
        SET @FILA_INDEX = @FILA_INDEX + 1;
    END
    
    FETCH NEXT FROM CURSOR_SALAS INTO @SALA_ID;
END

CLOSE CURSOR_SALAS;
DEALLOCATE CURSOR_SALAS;
